// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Portalai.Migrations
{
    [DbContext(typeof(PortalsDbContext))]
    partial class PortalsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EducationalRoutePlace", b =>
                {
                    b.Property<int>("EducationalRoutesId")
                        .HasColumnType("int");

                    b.Property<int>("PlacesId")
                        .HasColumnType("int");

                    b.HasKey("EducationalRoutesId", "PlacesId");

                    b.HasIndex("PlacesId");

                    b.ToTable("EducationalRoutePlace");
                });

            modelBuilder.Entity("Portalai.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fuel")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Opel",
                            Fuel = 3,
                            LicensePlate = "ABC 123",
                            ManufactureDate = new DateTime(2018, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2620),
                            Model = "Vivado",
                            Seats = 42,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Opel",
                            Fuel = 0,
                            LicensePlate = "BCA 234",
                            ManufactureDate = new DateTime(2021, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2663),
                            Model = "Vivado",
                            Seats = 54,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Arnas",
                            Fuel = 1,
                            LicensePlate = "CDE 345",
                            ManufactureDate = new DateTime(2016, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2667),
                            Model = "Gaming",
                            Seats = 12,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Arnas",
                            Fuel = 4,
                            LicensePlate = "DEF 456",
                            ManufactureDate = new DateTime(2011, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2671),
                            Model = "Driving",
                            Seats = 34,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Mad Lions",
                            Fuel = 1,
                            LicensePlate = "EFG 567",
                            ManufactureDate = new DateTime(2009, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2674),
                            Model = "Base",
                            Seats = 57,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Mad Lions",
                            Fuel = 4,
                            LicensePlate = "FGH 678",
                            ManufactureDate = new DateTime(2015, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2677),
                            Model = "Express",
                            Seats = 86,
                            Status = 0
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Mode",
                            Fuel = 0,
                            LicensePlate = "GHI 789",
                            ManufactureDate = new DateTime(2017, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2681),
                            Model = "Driving",
                            Seats = 56,
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            Brand = "Mode",
                            Fuel = 0,
                            LicensePlate = "JKL 890",
                            ManufactureDate = new DateTime(2022, 5, 17, 18, 8, 41, 867, DateTimeKind.Local).AddTicks(2684),
                            Model = "Trolling",
                            Seats = 21,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Portalai.Models.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortalId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmisionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortalId");

                    b.HasIndex("UserId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Portalai.Models.ComplaintHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplaintId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintId");

                    b.ToTable("ComplaintHistories");
                });

            modelBuilder.Entity("Portalai.Models.EducationalRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationalRoutes");
                });

            modelBuilder.Entity("Portalai.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 25.280000000000001,
                            Longitude = 54.687199999999997,
                            Name = "Vilnius"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 23.886099999999999,
                            Longitude = 54.897199999999998,
                            Name = "Kaunas"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 21.166699999999999,
                            Longitude = 55.75,
                            Name = "Klaipeda"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 24.350000000000001,
                            Longitude = 55.7333,
                            Name = "Panevezys"
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 23.316700000000001,
                            Longitude = 55.933300000000003,
                            Name = "Siauliai"
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 24.049199999999999,
                            Longitude = 54.401400000000002,
                            Name = "Alytus"
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 23.350000000000001,
                            Longitude = 54.547199999999997,
                            Name = "Marijampole"
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 22.333300000000001,
                            Longitude = 56.316699999999997,
                            Name = "Mazeikiai"
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 24.2806,
                            Longitude = 55.072200000000002,
                            Name = "Jonava"
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 25.600000000000001,
                            Longitude = 55.5,
                            Name = "Utena"
                        },
                        new
                        {
                            Id = 11,
                            Latitude = 23.966699999999999,
                            Longitude = 55.283299999999997,
                            Name = "Kedainiai"
                        },
                        new
                        {
                            Id = 12,
                            Latitude = 22.25,
                            Longitude = 55.9833,
                            Name = "Telsiai"
                        },
                        new
                        {
                            Id = 13,
                            Latitude = 22.2897,
                            Longitude = 55.252200000000002,
                            Name = "Taurage"
                        },
                        new
                        {
                            Id = 14,
                            Latitude = 24.75,
                            Longitude = 55.25,
                            Name = "Ukmerge"
                        },
                        new
                        {
                            Id = 15,
                            Latitude = 26.437999999999999,
                            Longitude = 55.597999999999999,
                            Name = "Visaginas"
                        },
                        new
                        {
                            Id = 16,
                            Latitude = 21.066700000000001,
                            Longitude = 55.916699999999999,
                            Name = "Palanga"
                        },
                        new
                        {
                            Id = 17,
                            Latitude = 21.850000000000001,
                            Longitude = 55.916699999999999,
                            Name = "Plunge"
                        },
                        new
                        {
                            Id = 18,
                            Latitude = 21.2422,
                            Longitude = 55.890000000000001,
                            Name = "Kretinga"
                        },
                        new
                        {
                            Id = 19,
                            Latitude = 21.4833,
                            Longitude = 55.350000000000001,
                            Name = "Silute"
                        },
                        new
                        {
                            Id = 20,
                            Latitude = 23.550000000000001,
                            Longitude = 55.799999999999997,
                            Name = "Radviliskis"
                        },
                        new
                        {
                            Id = 21,
                            Latitude = 23.966699999999999,
                            Longitude = 54.0167,
                            Name = "Druskininkai"
                        },
                        new
                        {
                            Id = 22,
                            Latitude = 25.583300000000001,
                            Longitude = 55.966700000000003,
                            Name = "Rokiskis"
                        },
                        new
                        {
                            Id = 23,
                            Latitude = 24.661100000000001,
                            Longitude = 54.786099999999998,
                            Name = "Elektrenai"
                        },
                        new
                        {
                            Id = 24,
                            Latitude = 22.7667,
                            Longitude = 55.083300000000001,
                            Name = "Jurbarkas"
                        },
                        new
                        {
                            Id = 25,
                            Latitude = 24.75,
                            Longitude = 56.200000000000003,
                            Name = "Birzai"
                        },
                        new
                        {
                            Id = 26,
                            Latitude = 23.033300000000001,
                            Longitude = 54.649999999999999,
                            Name = "Vilkaviskis"
                        },
                        new
                        {
                            Id = 27,
                            Latitude = 23.116700000000002,
                            Longitude = 55.366700000000002,
                            Name = "Raseiniai"
                        },
                        new
                        {
                            Id = 28,
                            Latitude = 23.941700000000001,
                            Longitude = 54.633299999999998,
                            Name = "Prienai"
                        },
                        new
                        {
                            Id = 29,
                            Latitude = 23.600000000000001,
                            Longitude = 56.2333,
                            Name = "Joniskis"
                        },
                        new
                        {
                            Id = 30,
                            Latitude = 25.100000000000001,
                            Longitude = 55.533299999999997,
                            Name = "Anyksciai"
                        },
                        new
                        {
                            Id = 31,
                            Latitude = 24.572199999999999,
                            Longitude = 54.211100000000002,
                            Name = "Varena"
                        },
                        new
                        {
                            Id = 32,
                            Latitude = 24.449999999999999,
                            Longitude = 54.866700000000002,
                            Name = "Kaisiadorys"
                        },
                        new
                        {
                            Id = 33,
                            Latitude = 22.899999999999999,
                            Longitude = 56.316699999999997,
                            Name = "Naujoji Akmene"
                        },
                        new
                        {
                            Id = 34,
                            Latitude = 22.933299999999999,
                            Longitude = 55.633299999999998,
                            Name = "Kelme"
                        },
                        new
                        {
                            Id = 35,
                            Latitude = 25.383299999999998,
                            Longitude = 54.316699999999997,
                            Name = "Salcininkai"
                        },
                        new
                        {
                            Id = 36,
                            Latitude = 24.403600000000001,
                            Longitude = 56.059399999999997,
                            Name = "Pasvalys"
                        },
                        new
                        {
                            Id = 37,
                            Latitude = 24.966699999999999,
                            Longitude = 55.833300000000001,
                            Name = "Kupiskis"
                        },
                        new
                        {
                            Id = 38,
                            Latitude = 26.25,
                            Longitude = 55.7333,
                            Name = "Zarasai"
                        },
                        new
                        {
                            Id = 39,
                            Latitude = 24.933299999999999,
                            Longitude = 54.633299999999998,
                            Name = "Trakai"
                        },
                        new
                        {
                            Id = 40,
                            Latitude = 25.416699999999999,
                            Longitude = 55.2333,
                            Name = "Moletai"
                        },
                        new
                        {
                            Id = 41,
                            Latitude = 23.5,
                            Longitude = 54.75,
                            Name = "Kazlu Ruda"
                        },
                        new
                        {
                            Id = 42,
                            Latitude = 23.050000000000001,
                            Longitude = 54.950000000000003,
                            Name = "Sakiai"
                        },
                        new
                        {
                            Id = 43,
                            Latitude = 21.533300000000001,
                            Longitude = 56.2667,
                            Name = "Skuodas"
                        },
                        new
                        {
                            Id = 44,
                            Latitude = 26.166699999999999,
                            Longitude = 55.350000000000001,
                            Name = "Ignalina"
                        },
                        new
                        {
                            Id = 45,
                            Latitude = 22.183299999999999,
                            Longitude = 55.4833,
                            Name = "Silale"
                        },
                        new
                        {
                            Id = 46,
                            Latitude = 23.866700000000002,
                            Longitude = 55.966700000000003,
                            Name = "Pakruojis"
                        },
                        new
                        {
                            Id = 47,
                            Latitude = 26.1556,
                            Longitude = 55.133299999999998,
                            Name = "Svencionys"
                        },
                        new
                        {
                            Id = 48,
                            Latitude = 23.216699999999999,
                            Longitude = 54.416699999999999,
                            Name = "Kalvarija"
                        },
                        new
                        {
                            Id = 49,
                            Latitude = 23.5167,
                            Longitude = 54.2333,
                            Name = "Lazdijai"
                        },
                        new
                        {
                            Id = 50,
                            Latitude = 21.933299999999999,
                            Longitude = 55.716700000000003,
                            Name = "Rietavas"
                        },
                        new
                        {
                            Id = 51,
                            Latitude = 24.020600000000002,
                            Longitude = 54.602800000000002,
                            Name = "Birstonas"
                        },
                        new
                        {
                            Id = 52,
                            Latitude = 21.005600000000001,
                            Longitude = 55.3033,
                            Name = "Nida"
                        },
                        new
                        {
                            Id = 53,
                            Latitude = 24.9694,
                            Longitude = 55.036099999999998,
                            Name = "Sirvintos"
                        },
                        new
                        {
                            Id = 54,
                            Latitude = 21.916699999999999,
                            Longitude = 55.133299999999998,
                            Name = "Pagegiai"
                        },
                        new
                        {
                            Id = 55,
                            Latitude = 21.403300000000002,
                            Longitude = 55.712800000000001,
                            Name = "Gargzdai"
                        },
                        new
                        {
                            Id = 56,
                            Latitude = 25.199999999999999,
                            Longitude = 54.600000000000001,
                            Name = "Aukstieji Paneriai"
                        },
                        new
                        {
                            Id = 57,
                            Latitude = 25.100000000000001,
                            Longitude = 54.666699999999999,
                            Name = "Grigiskes"
                        },
                        new
                        {
                            Id = 58,
                            Latitude = 22.916699999999999,
                            Longitude = 55.9833,
                            Name = "Kursenai"
                        },
                        new
                        {
                            Id = 59,
                            Latitude = 23.997,
                            Longitude = 54.395000000000003,
                            Name = "Likiskiai"
                        },
                        new
                        {
                            Id = 60,
                            Latitude = 23.866700000000002,
                            Longitude = 54.816699999999997,
                            Name = "Garliava"
                        },
                        new
                        {
                            Id = 61,
                            Latitude = 25.066700000000001,
                            Longitude = 54.649999999999999,
                            Name = "Lentvaris"
                        });
                });

            modelBuilder.Entity("Portalai.Models.Portal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CurrentLiquidLevel")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("LiquidCapacity")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("PortalJunctionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TeleportCount")
                        .HasColumnType("float");

                    b.Property<double>("TeleportPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PortalJunctionId");

                    b.ToTable("Portals");
                });

            modelBuilder.Entity("Portalai.Models.PortalJunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("PortalJunctions");
                });

            modelBuilder.Entity("Portalai.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyAnswerId");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Portalai.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Zarasai - Rokiškis - Panevėžys - Šiauliai - Plungė - Palanga - Klaipėda"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Vilnius - Kaunas - Raseiniai - Kryžkalnis - Klaipėda"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Rokiškis - Anykščiai - Ukmergė - Jonava - Kaunas"
                        });
                });

            modelBuilder.Entity("Portalai.Models.RouteVoyage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArrivalPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("DeparturePlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalPlaceId");

                    b.HasIndex("DeparturePlaceId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteVoyages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalPlaceId = 30,
                            DeparturePlaceId = 22,
                            Duration = 70,
                            Order = 1,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 2,
                            ArrivalPlaceId = 14,
                            DeparturePlaceId = 30,
                            Duration = 50,
                            Order = 2,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 3,
                            ArrivalPlaceId = 9,
                            DeparturePlaceId = 14,
                            Duration = 40,
                            Order = 3,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 4,
                            ArrivalPlaceId = 3,
                            DeparturePlaceId = 9,
                            Duration = 45,
                            Order = 4,
                            RouteId = 3
                        },
                        new
                        {
                            Id = 5,
                            ArrivalPlaceId = 2,
                            DeparturePlaceId = 1,
                            Duration = 105,
                            Order = 1,
                            RouteId = 2
                        },
                        new
                        {
                            Id = 6,
                            ArrivalPlaceId = 27,
                            DeparturePlaceId = 2,
                            Duration = 90,
                            Order = 2,
                            RouteId = 2
                        },
                        new
                        {
                            Id = 7,
                            ArrivalPlaceId = 3,
                            DeparturePlaceId = 27,
                            Duration = 150,
                            Order = 3,
                            RouteId = 2
                        },
                        new
                        {
                            Id = 8,
                            ArrivalPlaceId = 22,
                            DeparturePlaceId = 38,
                            Duration = 90,
                            Order = 1,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 9,
                            ArrivalPlaceId = 4,
                            DeparturePlaceId = 22,
                            Duration = 120,
                            Order = 2,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 10,
                            ArrivalPlaceId = 5,
                            DeparturePlaceId = 4,
                            Duration = 120,
                            Order = 3,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 11,
                            ArrivalPlaceId = 17,
                            DeparturePlaceId = 5,
                            Duration = 120,
                            Order = 4,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 12,
                            ArrivalPlaceId = 16,
                            DeparturePlaceId = 17,
                            Duration = 65,
                            Order = 5,
                            RouteId = 1
                        },
                        new
                        {
                            Id = 13,
                            ArrivalPlaceId = 3,
                            DeparturePlaceId = 16,
                            Duration = 30,
                            Order = 6,
                            RouteId = 1
                        });
                });

            modelBuilder.Entity("Portalai.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Portalai.Models.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("Portalai.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("Portalai.Models.SurveyQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyQuestionOptions");
                });

            modelBuilder.Entity("Portalai.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Seat")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Portalai.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RouteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Portalai.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Arnas@PortalsDB.com",
                            Name = "Arnas",
                            Password = "UUID",
                            Phone = "860000000",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "Modestas@PortalsDB.com",
                            Name = "Modestas",
                            Password = "UUID",
                            Phone = "860000000",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "Viktorija@PortalsDB.com",
                            Name = "Viktorija",
                            Password = "UUID",
                            Phone = "860000000",
                            Role = 3
                        },
                        new
                        {
                            Id = 4,
                            Email = "Dominykas@PortalsDB.com",
                            Name = "Dominykas",
                            Password = "UUID",
                            Phone = "860000000",
                            Role = 2
                        },
                        new
                        {
                            Id = 5,
                            Email = "Karolis@PortalsDB.com",
                            Name = "Karolis",
                            Password = "UUID",
                            Phone = "860000000",
                            Role = 0
                        });
                });

            modelBuilder.Entity("Portalai.Models.Voyage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("RouteVoyageId")
                        .HasColumnType("int");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RouteVoyageId");

                    b.HasIndex("TripId");

                    b.ToTable("Voyages");
                });

            modelBuilder.Entity("QuestionAnswerSurveyQuestionOption", b =>
                {
                    b.Property<int>("QuestionAnswersId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyQuestionOptionsId")
                        .HasColumnType("int");

                    b.HasKey("QuestionAnswersId", "SurveyQuestionOptionsId");

                    b.HasIndex("SurveyQuestionOptionsId");

                    b.ToTable("QuestionAnswerSurveyQuestionOption");
                });

            modelBuilder.Entity("EducationalRoutePlace", b =>
                {
                    b.HasOne("Portalai.Models.EducationalRoute", null)
                        .WithMany()
                        .HasForeignKey("EducationalRoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portalai.Models.Complaint", b =>
                {
                    b.HasOne("Portalai.Models.Portal", "Portal")
                        .WithMany("Complaints")
                        .HasForeignKey("PortalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Portalai.Models.ComplaintHistory", b =>
                {
                    b.HasOne("Portalai.Models.Complaint", "Complaint")
                        .WithMany("ComplaintHistories")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("Portalai.Models.Portal", b =>
                {
                    b.HasOne("Portalai.Models.PortalJunction", "PortalJunction")
                        .WithMany("Portals")
                        .HasForeignKey("PortalJunctionId");

                    b.Navigation("PortalJunction");
                });

            modelBuilder.Entity("Portalai.Models.QuestionAnswer", b =>
                {
                    b.HasOne("Portalai.Models.SurveyAnswer", "SurveyAnswer")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("SurveyAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyAnswer");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Portalai.Models.RouteVoyage", b =>
                {
                    b.HasOne("Portalai.Models.Place", "Arrival")
                        .WithMany("ArrivalVoyages")
                        .HasForeignKey("ArrivalPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.Place", "Departure")
                        .WithMany("DepartureVoyages")
                        .HasForeignKey("DeparturePlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.Route", "Route")
                        .WithMany("RouteVoyages")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrival");

                    b.Navigation("Departure");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Portalai.Models.SurveyAnswer", b =>
                {
                    b.HasOne("Portalai.Models.Survey", "Survey")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Portalai.Models.SurveyQuestion", b =>
                {
                    b.HasOne("Portalai.Models.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Portalai.Models.SurveyQuestionOption", b =>
                {
                    b.HasOne("Portalai.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionOptions")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Portalai.Models.Ticket", b =>
                {
                    b.HasOne("Portalai.Models.Trip", "Trip")
                        .WithMany("Tickets")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Portalai.Models.Trip", b =>
                {
                    b.HasOne("Portalai.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.Route", "Route")
                        .WithMany("Trips")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Portalai.Models.Voyage", b =>
                {
                    b.HasOne("Portalai.Models.RouteVoyage", "RouteVoyage")
                        .WithMany("Voyage")
                        .HasForeignKey("RouteVoyageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.Trip", "Trip")
                        .WithMany("Voyages")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteVoyage");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("QuestionAnswerSurveyQuestionOption", b =>
                {
                    b.HasOne("Portalai.Models.QuestionAnswer", null)
                        .WithMany()
                        .HasForeignKey("QuestionAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Portalai.Models.SurveyQuestionOption", null)
                        .WithMany()
                        .HasForeignKey("SurveyQuestionOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Portalai.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Portalai.Models.Complaint", b =>
                {
                    b.Navigation("ComplaintHistories");
                });

            modelBuilder.Entity("Portalai.Models.Place", b =>
                {
                    b.Navigation("ArrivalVoyages");

                    b.Navigation("DepartureVoyages");
                });

            modelBuilder.Entity("Portalai.Models.Portal", b =>
                {
                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("Portalai.Models.PortalJunction", b =>
                {
                    b.Navigation("Portals");
                });

            modelBuilder.Entity("Portalai.Models.Route", b =>
                {
                    b.Navigation("RouteVoyages");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Portalai.Models.RouteVoyage", b =>
                {
                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("Portalai.Models.Survey", b =>
                {
                    b.Navigation("SurveyAnswers");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Portalai.Models.SurveyAnswer", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Portalai.Models.SurveyQuestion", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("SurveyQuestionOptions");
                });

            modelBuilder.Entity("Portalai.Models.Trip", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Voyages");
                });

            modelBuilder.Entity("Portalai.Models.User", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
