@using Microsoft.EntityFrameworkCore
@model Complaint
@inject PortalsDbContext context;
@{
 
    ViewBag.Title = "Skundo būsenos keitimas";
    Layout = "_Layout";
    
    var complaint = await context.Complaints
        .SingleAsync(x => x.Id == Model.Id);
    List<ComplaintStatus> list = new List<ComplaintStatus>();
    
    if (complaint.Status == ComplaintStatus.Submited)
    {
        list = Enum.GetValues(typeof(ComplaintStatus))
            .Cast<ComplaintStatus>()
            .Where(e => e == ComplaintStatus.InProgress || e == ComplaintStatus.Rejected)
            .ToList();
    }
    else if (complaint.Status == ComplaintStatus.InProgress || complaint.Status == ComplaintStatus.Resolved)
    {
        list = Enum.GetValues(typeof(ComplaintStatus))
            .Cast<ComplaintStatus>()
            .Where(e => e == ComplaintStatus.Resolved)
            .ToList();
    }
    else
    {
        list = Enum.GetValues(typeof(ComplaintStatus))
            .Cast<ComplaintStatus>()
            .Where(e => e == ComplaintStatus.Rejected)
            .ToList();
    }
}

<div class="main-content-header container-fluid d-flex d-row justify-content-between align-items-center p-2">
    <span class="title">
        <h1>@ViewBag.Title</h1>
    </span>
    <span class="actions">
        <a href="@Url.Action("ShowComplaints")" class="btn btn-secondary"><i class="fa-solid fa-angles-left"></i> Atgal į sąrašą</a>
    </span>
</div>

<div class="container-fluid d-flex justify-content-center">
    @using (Html.BeginForm("PostEditState", "Complaint", FormMethod.Post,new { style = "width:50%" }))
    {
        @Html.AntiForgeryToken()
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.Portal)
        @Html.HiddenFor(m => m.User)

        <fieldset class="border rounded shadow p-2" style="word-wrap: break-word;">
            <div class="form-group">
                @Html.LabelFor(m => m.SubmisionDate, new { @class = "control-label" })
                @Html.EditorFor(m => m.SubmisionDate, new { htmlAttributes = new {@readonly = "readonly",  @class = "form-control" } })
            </div>
            
            <div class="form-group">
                @Html.LabelFor(m => m.Description, new { @class = "control-label" })
                <textarea id="Description" name="Description" class="form-control" readonly>@Model.Description</textarea>
            </div>
            
            <div class="form-group">
                @Html.LabelFor(m => m.Status, new { @class = "control-label" })
                @Html.DropDownListFor(m => m.Status, new SelectList(list), new {@class = "form-control" })
                @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Comment, new { @class = "control-label" })
                @Html.EditorFor(m => m.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Comment, "", new { @class = "text-danger" })
            </div>
        </fieldset>
        
        <div style="margin-top: 10px" class="container-fluid d-flex d-row justify-content-end">
            <button name="save" value="1" class="btn btn-success"><i style="padding-right: 5px" class="fa-solid fa-check"></i> Pateikti</button>
        </div>
    }
</div>